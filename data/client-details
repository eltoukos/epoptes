# /bin/sh -n
# This file is part of Epoptes, https://epoptes.org
# Copyright (C) 2023 the Epoptes team, see AUTHORS
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Implements some functions for health checking.
# To be merged in client-functions later on.

# Normalize load average as a percent number, where 100% means all CPUs are
# working fully, and >100% meaning they're overloaded.
avg2percent() {
    local avg integral decimal

    test -n "$_NUM_CPUS" || _NUM_CPUS=$(grep -c ^processor /proc/cpuinfo)
    # We want <number or zero>.<two decimal digits>
    avg=$(LANG=C printf "%.2f" "$1") || die "Wrong number: $1"
    integral=${avg%.*}
    decimal=${avg#*.}
    if [ "$integral" != 0 ]; then
        avg="$integral$decimal"
    else
        avg=$((1$decimal - 100))
    fi
    echo "$((avg / _NUM_CPUS))"
}

cpu() {
    local _avg1 avg5 _avg15 _rest

    # man proc
    read -r _avg1 avg5 _avg15 _rest </proc/loadavg
    print_num "$(avg2percent "$avg5")"
}

disk() {
    local max _filesystem _size _used _avail use mounted

    max=0
    while read -r _filesystem _size _used _avail use mounted; do
        case "$mounted" in
        / | /home | /srv)
            use=${use%\%}
            test "$use" -gt "$max" && max=$use
            ;;
        esac
    done <<EOF
$(df -h)
EOF
    print_num "$max"
}

mem() {
    local memtotal memavail swaptotal swapfree

    memtotal=
    memavail=
    swaptotal=
    swapfree=
    while read -r line; do
        set -o noglob
        # shellcheck disable=SC2086
        set -- $line
        set +o noglob
        case "$1" in
        Mem:)
            memtotal=$2
            memavail=$7
            ;;
        Swap:)
            swaptotal=$2
            swapfree=$4
            ;;
        esac
    done <<EOF
$(LANG=C free)
EOF
    print_num "$((100 - 100 * memavail / memtotal))"
    if [ "$swaptotal" = "" ] || [ "$swaptotal" = 0 ]; then
        print_num -1
    else
        print_num "$((100 - 100 * swapfree / swaptotal))" 10 50
    fi
}

# Custom printf that defaults to newline, supports `-n` to skip it,
# and logger-like `-pPRIORITY` for journald-style Colors.
printc() {
    local fmt c

    fmt="\n"
    c=""
    # Log levels: https://man7.org/linux/man-pages/man3/syslog.3.html
    # Colors: https://www.freedesktop.org/software/systemd/man/journalctl.html
    # https://github.com/systemd/systemd/blob/main/src/basic/terminal-util.h
    # for i in $(seq 0 7); do printc -$i $i; done
    # for i in $(seq 0 7); do logger -p$i $i; done; journalctl -fb -n8
    while [ -n "$1" ]; do
        case "$1" in
        -n) fmt="" ;;
        -p0 | -pemerg) c="0;1;31" ;;         # system is unusable
        -p1 | -palert) c="0;1;31" ;;         # action must be taken immediately
        -p2 | -pcrit) c="0;1;31" ;;          # critical conditions
        -p3 | -perr) c="0;1;31" ;;           # error conditions
        -p4 | -pwarning) c="0;1;38;5;185" ;; # warning conditions
        -p5 | -pnotice) c="0;1" ;;           # normal but significant condition
        -p6 | -pinfo) c="" ;;                # informational message
        -p7 | -pdebug) c="0;38;5;245" ;;     # debug-level message
        -p)
            # Replace `-p priority` with `-ppriority` and continue
            c=$2
            shift 2
            set -- "-p${c}" "$@"
            continue
            ;;
        *) break ;;
        esac
        shift
    done
    if [ -n "$c" ]; then
        fmt="\033[${c}m${1}\033[0m${fmt}"
    else
        fmt="${1}${fmt}"
    fi
    test $# -gt 1 && shift
    # shellcheck disable=SC2059
    printf "$fmt" "$@"
}

print_num() {
    local num lo hi prio

    num=$1
    lo=${2:-90}
    hi=${3:-95}
    if [ "$num" -lt "$lo" ]; then
        prio=info
    elif [ "$num" -lt "$hi" ]; then
        prio=warning
    else
        prio=err
    fi
    printc -n -p"$prio" "%5s" "$num"
}

main() {
    cat <<EOF
  CPU  RAM  SWP  DSK
$(cpu)$(mem)$(disk)
EOF
}

main "$@"
